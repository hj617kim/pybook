#!/usr/bin/env python
# coding: utf-8

# # 튜플
# 
# 파이썬에 내장되어 있는 컬렉션 자료형 중에서 튜플에 대해 알아 보자.  
# 튜플은 리스트와 거의 비슷하지만, 수정 불가능(immutable)하다는 점이 다르다.

# 튜플의 형식은 아래와 같다. 
# 
# > `(항목1, 항목2, 항목3, ...  항목n)`
# 
# 소괄호(`()`)를 사용하고, 각 항목은 콤마(,)로 구분한다. 

# 예를 들어, 1부터 10이하의 짝수를 담은 튜플 `even_numbers_tuple`를 만드는 코드는 아래와 같다. 

# In[1]:


even_numbers_tuple = (2, 4, 6, 8, 10)
even_numbers_tuple


# 비슷하게, 문자열 a, b, c를 담은 리스트 `tuple_abc`는 아래와 같다. 

# In[2]:


tuple_abc = ('a', 'b', 'c')
tuple_abc


# 리스트와 마찬가지로, 튜플도 서로 다른 자료형의 항목들을 포함할 수 있다.

# In[3]:


mixed_tuple = (1, 'abc', [2.5, 4.5], (1, 2))
mixed_tuple 


# 참고) 튜플도 중첩을 허용한다. 

# 주의) 한 개의 항목을 가진 튜플을 만들 때는 항목 뒤에 콤마(,)를 반드시 붙여야 한다. 

# In[4]:


a = (1)
print(a)
print(type(a))


# In[5]:


a_tuple = (1, )
print(a_tuple)
print(type(a_tuple))


# 참고) 튜플을 만들 때 소괄호를 생략해도 된다. 하지만 기본적으로 소괄호를 사용한다. 

# In[6]:


b_tuple = 10, 20, 30
print(b_tuple)
print(type(b_tuple))


# ## 튜플 연산
# 
# 튜플은 사칙연산 중 덧셈과 곱셈 연산자를 사용할 수 있다.

# In[7]:


(1, 2) + (2, 3, 4)


# In[8]:


(1, 2, 3) * 3


# ## 튜플의 길이
# 
# 튜플의 길이는 `len()` 함수를 이용하여 확인할 수 있다.

# In[9]:


len((1, 2))


# In[10]:


tuple_abc = ("a", "b", "c")
len(tuple_abc)


# ## 튜플의 인덱싱과 슬라이싱 
# 
# 튜플도 문자열처럼 인덱싱과 슬라이싱을 이용하여 각각의 항목 또는 여러 개의 항목에 대한 정보를 추출할 수 있다. 

# ### 인덱싱
# 
# 인덱스는 0부터 시작하며, 오른쪽으로 한 항목씩 이동할 때마다 증가한다.  
# 예제를 통해 살펴보자. 

# In[11]:


a_tuple = (1, 2, 3, 4, 5)
a_tuple


# 2번 인덱스 값(즉, 셋째 항목)은 다음과 같이 확인한다.

# In[12]:


a_tuple[2]


# 가장 오른쪽 항목은 다음과 같이 확인한다. 

# In[13]:


a_tuple[-1]


# 문자열, 리스트와 마찬가지로 튜플의 길이보다 같거나 큰 인덱스를 사용하면 오류가 발생한다.  
# ```python
# >>> a_tuple[5]
# a_tuple[5]
# ---------------------------------------------------------------------------
# IndexError                                Traceback (most recent call last)
# <ipython-input-31-980543bad505> in <module>()
# ----> 1 a_tuple[5]
# 
# IndexError: tuple index out of range
# ```

# 1번 인덱스 값 `a_tuple[1]`과 2번 인덱스 값 `a_tuple[2]`를 곱하고 싶다면, 아래와 같이 할 수 있다. 

# In[14]:


a_tuple[1] * a_tuple[2]


# 주의) `a_tuple[1]`와 `a_tuple[2]`의 자료형은 정수형으로 곱셈 연산이 가능하다. 

# In[15]:


print(type(a_tuple[1]))
print(type(a_tuple[2]))


# ex) 튜플은 중첩을 허용한다. 아래 튜플은 3중 튜플이다.   
# `a_nested_tuple = (1, 2, (3, 4, (5, 6, 7)), 8)` 
# 
# 위 튜플에서 5를 인덱스로 얻는 방법은?  
# 참고) 인덱싱을 연속해서 적용하면 된다.

# In[16]:


a_nested_tuple = (1, 2, (3, 4, (5, 6, 7)), 8)
a_nested_tuple[2][2][0]


# ### 슬라이싱

# 문자열, 리스트와 마찬가지로 튜플에서도 슬라이싱을 할 수 있다. 사용법도 동일하다.  
# 예제를 통해 살펴보자 

# In[17]:


a = (1, 2, 3, 4, 5)
a[0 : 2] # 처음부터 2번 인덱스 전까지 추출


# In[18]:


a[:2] #처음부터 2번 인덱스 전까지 추출


# In[19]:


a[::2] #처음부터 하나씩 건너 추출


# 중첩 튜플에서도 슬라이싱 방법은 똑같이 적용된다.

# ## `tuple()` 함수
# 
# `tuple()` 함수를 이용하면 문자열 또는 리스트를 튜플로 만들 수 있다. 

# * 인자로 문자열을 넣으면, 각 문자를 항목으로 갖는 튜플이 만들어진다. 

# In[20]:


tuple("abc")


# * 인자로 리스트를 넣으면, 리스트와 항목이 같은 튜플이 만들어진다. 

# In[21]:


tuple([1, 2, 3])


# * 인자를 넣지 않으면 아무 것도 포함하지 않는 빈 튜플이 만들어진다.

# In[22]:


empty_tuple = tuple()
empty_tuple


# ## 불변자료형
# 
# 튜플은 불변 자료형이다. 그래서 리스트와는 달리 인덱싱을 사용하여 튜플 특정 항목의 값을 변경할 수 없다.  
# 
# ```python
# >>> a = (1, 2, 3, 4, 5)
# >>> print(a)
# (1, 2, 3, 4, 5)
# ```
# 
# ```python
# >>> a[1] = 3
# ---------------------------------------------------------------------------
# TypeError                                 Traceback (most recent call last)
# <ipython-input-46-23f2cf2bdf70> in <module>()
# ----> 1 a[1] = 3
# 
# TypeError: 'tuple' object does not support item assignment
# ```

# `del` 명령문을 사용하여 튜플의 항목을 삭제하려고 해도 오류가 발생한다.   
# 
# ```python
# >>> del a[1]
# ---------------------------------------------------------------------------
# TypeError                                 Traceback (most recent call last)
# <ipython-input-47-d982d7dc2a95> in <module>()
# ----> 1 del a[1]
# 
# TypeError: 'tuple' object doesn't support item deletion
# ```

# ## 튜플 관련 메서드 
# 
# 튜플 자료형은 불변 자료형이라서 메서드가 별로 없다. 많이 사용되는 두 개의 메서드를 살펴보자.  
# * `count()`
# * `index()`

# 예제를 통해 각 메서드의 활용법을 간략하게 확인하다.  
# 먼저, 튜플을 하나 만들자. 

# In[23]:


numbers = (1, 2, 3, 1, 2, 4, 5, 6, 3, 4, 5, 6)
numbers


# * `count()` 메서드는 튜플에 포함된 특정 항목이 몇 번 나타나는지를 세어준다.

# In[24]:


numbers.count(1)


# * `index()` 메서드는 특정 항목의 인덱스가 몇 번인지 확인해준다. 

# In[25]:


numbers.index(2)


# 참고) 여러 번 포함되어 있다면, `index()` 메서드는 가장 작은 인덱스를 리턴한다. 

# ## 튜플 자료형 활용

# * 절대로 변경되지 않거나 변경되어서는 안 되는 값들을 저장할 때 사용.  
# ex) 생년월일, 학번 등등  
# 

# In[26]:


alice_birth = (2000, 12, 18)
alice_birth


# * 여러 개의 변수들에 여러 개의 값들을 한 줄에 동시에 할당하기 위해 사용

# In[27]:


a, b = 1, 2
print(a)
print(b)


# 튜플을 이용하면 두 변수에 할당된 값을 스왑(swap)하는 것이 매우 간단하다.

# In[28]:


a, b = b, a
print(a)
print(b)


# * 여러 개의 값들을 리턴하는 함수를 정의할 때 사용  
# 
# 함수의 리턴값은 무조건 하나이다. 예를 들어, 정수를 입력받아 입력받은 값의 제곱과 세제곱을 동시에 리턴하는 함수는 정의할 수 없다. 하지만, 두 개의 값을 튜플로 묶어서 하나의 값으로 리턴할 수는 있다.  
# 
# 주의) 튜플을 만들 때, 소괄호 기호는 생략 가능하다. 

# In[29]:


def f(x) :
    return x**2, x**3


# In[30]:


print(f(2))
print(type(f(2)))


# 이제 아래와 같이 리턴값 각각의 항목을 변수에 할당하여 사용할 수 있다. 

# In[31]:


a, b = f(2)
print(a)
print(b)

