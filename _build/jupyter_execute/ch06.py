#!/usr/bin/env python
# coding: utf-8

# # 문자열

# ## 문자열 인덱싱

# 문자열에 사용되는 모든 문자의 위치는 인덱스<font size="2">index</font>라는 고유한 번호를 갖는다. 인덱스는 0부터 시작하며, 오른쪽으로 한 문자씩 이동할 때마다 증가한다.

# :::{admonition} 주의  
# :class: caution  
# 파이썬을 포함해서 많은 대부분의 프로그래밍 언어에서 인덱싱은 0부터 시작한다. 따라서 첫 째 문자를 확인하고자 할 때는 1이 아닌 0을 인덱스로 사용해야 한다.  ㄹ
# :::

# 예제를 통해 인덱스와 친숙해질 필요가 있다.

# In[1]:


a_food = "kebap"


# 특정 인덱스에 위치한 문자의 정보는 다음과 같이 확인한다.
# * 0번 인덱스 값, 즉 첫째 문자

# In[2]:


a_food[0]


# * 1번 인덱스 값, 즉 둘째 문자

# In[3]:


a_food[1]


# * 2번 인덱스 값, 즉 셋째 문자

# In[4]:


a_food[2]


# 등등.
# 
# 
# **-1번 인덱스**  
# 문자열이 길 경우 맨 오른쪽에 위치한 문자의 인덱스 번호를 확인하기가 어렵다. 그래서 파이썬에서는 -1을 마지막 문자의 인덱스로 사용한다.  
# 즉, 맨 오른편의 인덱스는 -1이고, 그 왼편은 -2, 등등으로 진행한다. 

# In[5]:


a_food[-1]


# In[6]:


a_food[-2]


# 등등.  
# <br>
# 
# **문자열의 길이와 인덱스**
# 
# 문자열의 길이보다 같거나 큰 인덱스를 사용하면 오류가 발생한다. 문자열의 길이는 `len()` 함수를 이용하여 확인할 수 있다.
# ```python
# >>> a_food[5]
# ---------------------------------------------------------------------------
# IndexError                                Traceback (most recent call last)
# <ipython-input-37-d133e021743e> in <module>()
# ----> 1 a_food[5]
# 
# IndexError: string index out of range
# ```

# In[7]:


len(a_food)


# ## 슬라이싱
# 
# 문자열의 하나의 문자가 아닌 특정 구간 및 부분을 추출하고자 할 경우 슬라이싱을 사용한다. 슬라이싱은 다음과 같이 실행한다.
# 
# > 문자열변수[시작인덱스 : 끝인덱스 : 계단(step)]
# 
# * 시작인덱스 : 해당 인덱스부터 문자를 추출한다.
# * 끝인덱스 : 해당 인덱스 전까지 문자를 추출한다. 
# * 계단(step) : 시작인덱스부터 몇 계단씩 건너뛰며 문자를 추출할지 결정한다. 예를 들어, 계단값이 2라면 하나 건너 추출한다.  

# In[8]:


a_food


# `kebap`에서 `ke` 부분을 추출하고 싶다면 다음과 같이 하면 된다.

# In[9]:


a_food[0 : 2 : 1]


# 즉, 문자열 처음부터 2번 인덱스 전까지, 즉 두 번째 문자까지 모두 추출하는 것이다. 반면에 하나씩 건너서 추출하려면 다음과 같이 하면 된다. 

# In[10]:


a_food[0 : 4 : 2]


# 시작인덱스, 끝인덱스, 계단 각각의 인자는 경우에 따라 생략될 수도 있다. 그럴 때는 각각의 위치에 기본값(default)이 들어 있는 것으로 처리되며, 기본값은 다음과 같다.
# 
# * `시작인덱스`의 기본값 = `0`
# * `끝인덱스`의 기본값 = 문자열의 길이
# * `계단`의 기본값 = `1`

# In[11]:


a_food[0 : 2]


# In[12]:


a_food[ : 2]


# In[13]:


a_food[ : 4 : 2]


# In[14]:


a_food[ : : 2]


# 양수와 음수를 인덱스로 섞어서 사용할 수도 있다.

# In[15]:


a_food[ : -1 : 2]


# 주의 : -1은 문자열의 끝인덱스를 의미한다.  
# 
# 끝인덱스가 문자열의 길이보다 클 수도 있다. 다만 문자열의 길이만큼만 문자를 확인하다. 

# In[16]:


a_food[: 10]


# 아래와 같이 아무것도 입력하지 않으면 해당 문자열 전체를 추출한다.

# In[17]:


a_food[:]


# 시작인덱스의 값이 끝인덱스 값보다 같거나 작아야 제대로 추출한다. 그렇지 않으면 공문자열이 추출된다.

# In[18]:


a_food[3 : 1]


# 이유는 슬라이싱은 기본적으로 작은 인덱스에서 큰 인덱스 방향으로 확인하기 때문이다. 역순으로 추출하고자 한다면 계단을 음수로 사용하면 된다.

# In[19]:


a_food[3 : 1 : -1]


# In[20]:


a_food[-1 : : -1]


# ## 문자열 관련 메소드
# 
# 문자열 자료형에만 사용하는 함수들이 있다. 이와같이 특정 자료형에만 사용하는 함수들을 메소드(method)라 부른다.  
# 
# 보다 자세한 설명은 여기서는 하지 않는다. 다만 특정 자료형을 잘 다루기 위해서는 어떤 경우에 어떤 메소드를 유용하게 활용할 수 있는지를 잘 파악해두는 것이 매우 중요하다는 점만 강조한다. 
# 

# ### 메소드 호출방법
# 
# 예를 들어, `banana` 문자열을 이용하여 `BANANA`처럼 모두 대문자로만 구성된 문자열을 생성하고자 한다면 `upper`라는 메소드를 아래와 같이 사용한다.
# 
# > `'banana'.upper()` 
# 
# 메소드는 일반적인 함수들과는 달리, 특정 자료형의 값이 먼저 언급된 다음에 호출된다. 

# ### 문자열 메소드 추가 예제
# 
# `upper()` 메소드 이외에 문자열과 관련된 메소드는 매우 많다. 여기서는 가장 많이 사용되는 메소드 몇 개를 소개하고자 한다. 
# 
# * `strip()`
# * `split()`
# * `replace()`
# * `upper()`
# * `lower()`
# * `capitalize()`
# * `title()`
# * `startswith()`
# * `endswith()`
# 
# 예제를 통해 각 메소드의 활용법을 간략하게 확인한다. 
# 
# 먼저 `week_days` 변수에 요일들을 저장한다.

# In[21]:


week_days = " Mon, Tue, Wed, Thu, Fri, Sat, Sun "


# * `strip()` 메소드는 문자열의 양 끝을 지정한 문자열 기준으로 삭제하는 방식으로 정리한다. 
# 예를 들어, 문자열 양 끝에 있는 스페이스를 삭제하고자 할 경우 아래와 같이 실행한다. 

# In[22]:


week_days.strip(" ")


# `strip()` 메소드를 인자 없이 호출하는 경우와 동일하다. 

# In[23]:


week_days.strip()


# * `split()` 메소드는 지정된 부분문자열을 기준으로 문자열을 쪼개어 문자열들의 리스트로 반환한다. 리스트 자료형은 이후에 자세히 다룬다.  
# 
# 아래의 예제는 `", "`, 즉 콤마와 스페이스를 기준으로 문자열을 쪼갠다.

# In[24]:


week_days.split(", ")


# 두 개 이상의 메소드를 조합해서 활용할 수도 있다.  
# 예를 들어, `strip()` 메소드를 먼저 실행한 다음에 그 결과에 `split()` 메소드를 실행하면 좀 더 산뜻한 결과를 얻을 수 있다. 

# In[25]:


week_days.strip(" ").split(", ")


# :::{admonition} 주의  
# :class: caution  
# 아래와 같이 `split()` 메소드를 실행한 다음에 그 결과에 `strip()` 메소드를 실행하면 오류가 발생한다. 앞에서 언급한 것처럼 `split()` 메소드는 지정된 부분문자열을 기준으로 문자열을 쪼개어 문자열들의 리스트로 반환하고, 리스트에는 `strip()` 메소드가 없기 때문이다.
# 
# ```python
# >>> week_days.split(", ").strip(" ")
# ---------------------------------------------------------------------------
# AttributeError                            Traceback (most recent call last)
# <ipython-input-64-df2f84ecfaf8> in <module>()
# ----> 1 week_days.split(", ").strip(" ")
# 
# AttributeError: 'list' object has no attribute 'strip'
# ```
# :::
# 

# * `replace()` 메소드는 하나의 문자열을 다른 문자열로 대체한다. 
#  
# 예를 들어, `" Mon"`을 `Mon`으로 대체할 경우 아래와 같이 실행한다.

# In[26]:


week_days.replace(" Mon", "Mon")


# * `upper()` 메소드는 모든 문자를 대문자로 변환시킨다. 

# In[27]:


week_days.upper()


# In[28]:


week_days.strip().upper()


# * `lower()` 메소드는 모든 문자를 소문자로 변환시킨다.

# In[29]:


week_days.lower()


# In[30]:


week_days.strip().lower()


# In[31]:


week_days.strip().lower().split(", ")


# * `caplitalize()` 메소드는 제일 첫 문자를 대문자로 변환시킨다.  
# 
# 아래 예제는 변화가 없어 보인다. 이유는 첫 문자가 스페이스이기 때문이다.

# In[32]:


week_days.capitalize()


# In[33]:


week_days.strip().capitalize()


# * `title()` 메소드는 각각의 단어의 첫 문자를 대문자로 변환시킨다.  
# 
# 참고 : 영문 책의 타이틀은 각 단어의 첫 알파벳이 대문자로 쓰여진 경우가 많다. 

# In[34]:


week_days.title()


# In[35]:


week_days.strip().title()


# * `startswith()` 메소드는 문자열이 특정 문자열로 시작하는지 여부를 판단해준다.

# In[36]:


week_days.startswith(" M")


# * `endswith()` 메소드는 문자열이 특정 문자열로 끝나는지 여부를 판단해준다.

# In[37]:


week_days.endswith("n ")


# ## 불변 자료형
# 
# 파이썬의 문자열 자료형의 값들은 변경이 불가능하다. 앞서 `week_days`에 할당된 문자열에 다양한 메소드를 적용하여 새로운 문자열을 생성하였지만 `week_days`에 할당된 문자열 자체는 전혀 변하지 않았음을 아래와 같이 확인할 수 있다. 

# In[38]:


week_days


# 이와 같이 한 번 정해지면 절대 변경이 불가능한 자료형을 불변(immutable) 자료형이라 부른다.  
# 주어진 문자열을 이용하여 새로운 문자열을 생성하고 활용하려면 새로운 변수에 저장하여 활용해야 한다.

# In[39]:


stripped_week_days = week_days.strip()


# In[40]:


stripped_week_days


# ## 문자열 포매팅(String formatting)

# ### str.format()  
# 
# `format()`메소드를 사용하면, 문자열의 중괄호(`{}`)가 `format()`의 인자로 변경된다. 예제와 함께 살펴보자. 

# In[41]:


'{}님, 안녕하세요.'.format('alice')


# In[42]:


name = 'alice'
'{}님, 안녕하세요.'.format(name)


# In[43]:


age = 10
'alice는 {}살이다.'.format(age)


# 여러 개의 값을 변경할 때는 콤마(,)로 구분해서 적어준다. 

# In[44]:


name = 'alice'
age = 10
'{}는 {}살이다.'.format(name, age)


# 인덱스 항목을 사용하여 넣어줄 위치를 지정할 수도 있다.

# In[45]:


name1 = 'alice'
name2 = 'bob'
print('{}와 {}는 친구다.'.format(name1, name2))
print('{0}와 {1}는 친구다.'.format(name1, name2))
print('{1}와 {0}는 친구다.'.format(name1, name2))


# **소수점 표현**  
# `:`뒤에 소수점아래 몇 번째 자리까지 출력할지를 적어주면, 그 만큼을 보여준다.  
# 예제와 함께 살펴보자. 
# * `.`은 소수점을 의미하고, 소수점 뒤의 숫자는 소수점 뒤에 나올 숫자의 개수다.  
# 

# In[46]:


num = 0.123456789
print('{0:.1f}'.format(num))
print('{0:.2f}'.format(num))
print('{0:.3f}'.format(num))
print('{0:.5f}'.format(num)) # 소수점 아래 여섯 번째 자리에서 반올림


# ### f-string    
# 문자열에 `f` 를 붙이면, 문자열 포매팅 기능을 사용할 수 있다.  
# 예제와 함께 살펴보자.  

# In[47]:


name = 'alice'
f'{name}님, 안녕하세요.'


# In[48]:


age = 10
f'alice는 {age}살이다.'


# In[49]:


name = 'alice'
age = 10
f'{name}는 {age}살이다.'


# `{}`안에 변수와 수식(+, -, *, / 등)을 함께 사용하는 것도 가능하다. 

# In[50]:


name = 'alice'
age = 10
f'{name}의 동생은 {age - 3}살이다'


# In[51]:


num = 0.123456789
print(f'{num:.1f}')
print(f'{num:.2f}')
print(f'{num:.3f}')

